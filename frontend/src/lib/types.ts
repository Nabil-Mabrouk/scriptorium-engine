/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new book project
         * @description Creates a new project record from a user's 'raw_blueprint'.
         */
        post: operations["create_new_project_projects__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Full Project Details
         * @description Retrieves the full details of a project, including all its
         *     parts and chapters, for display on a dashboard.
         */
        get: operations["get_project_details_projects__project_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/finalize-parts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Finalize the Part structure of a book
         * @description Takes a validated list of Parts from the user and creates the official
         *     Part records in the database, finalizing the book's high-level structure.
         */
        put: operations["finalize_project_parts_projects__project_id__finalize_parts_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chapters/{chapter_id}/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Queue Chapter Content Generation
         * @description Queues a background job to write the content for a specific chapter
         *     using the dynamically selected AI agent.
         */
        post: operations["queue_chapter_generation_chapters__chapter_id__generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chapters/{chapter_id}/analyze-transition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Queue Transition Analysis
         * @description Queues a background job for the Continuity Editor AI to analyze the
         *     narrative flow between this chapter and the one preceding it.
         *     The feedback is saved directly to the chapter in the database.
         */
        post: operations["queue_transition_analysis_chapters__chapter_id__analyze_transition_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/parts/{part_id}/finalize-chapters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Finalize the Chapter structure for a Part
         * @description Takes a validated list of Chapters for a specific Part and creates the
         *     official Chapter records in the database.
         */
        put: operations["finalize_part_chapters_parts__part_id__finalize_chapters_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crew/generate-parts/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate High-Level Part Structure
         * @description Queues a background job for the Architect AI to generate a high-level
         *     list of Parts and their summaries from the project's raw blueprint.
         */
        post: operations["queue_part_generation_crew_generate_parts__project_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crew/generate-chapters/{part_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Detailed Chapter Outline for a Part
         * @description Queues a background job to generate a detailed chapter outline for a
         *     specific part of the book.
         */
        post: operations["queue_chapter_detailing_crew_generate_chapters__part_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crew/projects/{project_id}/finalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Introduction or Conclusion
         * @description Queues a background job for the Theorist AI to write the book's
         *     introduction or conclusion based on the full content.
         */
        post: operations["queue_finalization_crew_projects__project_id__finalize_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/crew/crew/status/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Job Status */
        get: operations["job_status_crew_crew_status__job_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ChapterBrief
         * @description A structured writing brief for a specialist agent.
         */
        ChapterBrief: {
            /**
             * Thesis Statement
             * @description The central thesis or main argument the chapter must defend.
             */
            thesis_statement: string;
            /**
             * Narrative Arc
             * @description A description of the chapter's narrative structure.
             */
            narrative_arc: string;
            /**
             * Required Inclusions
             * @description A list of non-negotiable concepts that MUST be included.
             */
            required_inclusions: string[];
            /**
             * Key Questions To Answer
             * @description The specific questions the chapter must answer.
             */
            key_questions_to_answer: string[];
        };
        /**
         * ChapterListOutline
         * @description A Pydantic model for a list of chapters for a single part.
         */
        ChapterListOutline: {
            /** Chapters */
            chapters: components["schemas"]["ChapterOutline"][];
        };
        /**
         * ChapterOutline
         * @description Defines the structure for a single chapter.
         */
        ChapterOutline: {
            /** Chapter Number */
            chapter_number: number;
            /** Title */
            title: string;
            brief: components["schemas"]["ChapterBrief"];
            /** Suggested Agent */
            suggested_agent: string;
        };
        /**
         * ChapterRead
         * @description Read schema for a single Chapter, using the 'brief' field.
         */
        ChapterRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Chapter Number */
            chapter_number: number;
            /** Title */
            title: string;
            brief?: components["schemas"]["ChapterBrief"] | null;
            /** Status */
            status: string;
            /** Suggested Agent */
            suggested_agent?: string | null;
            part: components["schemas"]["PartRead"];
        };
        /** FinalizationRequest */
        FinalizationRequest: {
            /**
             * Task Type
             * @description The type of finalization task to run, e.g., 'introduction' or 'conclusion'.
             */
            task_type: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** PartListOutline */
        PartListOutline: {
            /**
             * Parts
             * @description List of book parts
             */
            parts: components["schemas"]["PartOnlyOutline"][];
        };
        /** PartOnlyOutline */
        PartOnlyOutline: {
            /**
             * Part Number
             * @description Numerical order of the part
             */
            part_number: number;
            /**
             * Title
             * @description Title of the part
             */
            title: string;
            /**
             * Summary
             * @description Brief summary of the part's content
             */
            summary: string;
        };
        /**
         * PartRead
         * @description Read schema for a single Part.
         */
        PartRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Part Number */
            part_number: number;
            /** Title */
            title: string;
            /** Summary */
            summary?: string | null;
        };
        /**
         * PartReadWithChapters
         * @description Read schema for a Part that includes its nested Chapters.
         */
        PartReadWithChapters: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Part Number */
            part_number: number;
            /** Title */
            title: string;
            /** Summary */
            summary?: string | null;
            /**
             * Chapters
             * @default []
             */
            chapters: components["schemas"]["ChapterRead"][];
        };
        /**
         * ProjectCreate
         * @description The schema for creating a project from a raw text blueprint.
         */
        ProjectCreate: {
            /** Raw Blueprint */
            raw_blueprint: string;
        };
        /**
         * ProjectDetailRead
         * @description Read schema for a full Project, including all its Parts and Chapters.
         */
        ProjectDetailRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Raw Blueprint */
            raw_blueprint: string;
            /** Status */
            status: string;
            /** Structured Outline */
            structured_outline?: {
                [key: string]: unknown;
            } | null;
            /** Total Cost */
            total_cost: string;
            /**
             * Parts
             * @default []
             */
            parts: components["schemas"]["PartReadWithChapters"][];
        };
        /**
         * ProjectRead
         * @description Base read schema for a project.
         */
        ProjectRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Raw Blueprint */
            raw_blueprint: string;
            /** Status */
            status: string;
            /** Structured Outline */
            structured_outline?: {
                [key: string]: unknown;
            } | null;
            /** Total Cost */
            total_cost: string;
        };
        /**
         * TaskStatus
         * @description A simple schema for returning the status of a queued job.
         */
        TaskStatus: {
            /** Job Id */
            job_id: string;
            /** Status */
            status: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    create_new_project_projects__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_project_details_projects__project_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectDetailRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    finalize_project_parts_projects__project_id__finalize_parts_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PartListOutline"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectDetailRead"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    queue_chapter_generation_chapters__chapter_id__generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    queue_transition_analysis_chapters__chapter_id__analyze_transition_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chapter_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    finalize_part_chapters_parts__part_id__finalize_chapters_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                part_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChapterListOutline"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartReadWithChapters"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    queue_part_generation_crew_generate_parts__project_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    queue_chapter_detailing_crew_generate_chapters__part_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                part_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    queue_finalization_crew_projects__project_id__finalize_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FinalizationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    job_status_crew_crew_status__job_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    health_check__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
